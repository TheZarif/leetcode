class Solution:
# Backtracking algo
# Complexity O(n!)
# Could be optimized further by keeping a matrix of attacked positions
    def solveNQueens(self, n: int) -> List[List[str]]:
        sols=[]
        
        def translate(board: List[List[int]]) -> List[str]:
            nonlocal n            
            res=[]
            for i in range(n):
                s=''
                for j in range(n):
                    if board[i][j]==1:
                        s+='Q'
                    else:
                        s+='.'
                res.append(s)
            return res
        
        def getBoard(n: int) -> List[List[int]]:
            board=[]
            for i in range(n):
                row=[]
                for j in range(n):
                    row.append(0)
                board.append(row)
            return board
        
        def isValid(board: List[List[int]], row, col):
            count=0
            for j in range(n):
                if board[row][j]==1:
                    count+=1
                    if count>1:
                        return False
            count=0
            for i in range(n):
                if board[i][col]==1:
                    count+=1
                    if count>1:
                        return False
            i=row+1
            j=col+1
            while i<n and j<n:
                if board[i][j]==1:
                    return False
                i+=1
                j+=1
            i=row-1
            j=col-1
            while i>=0 and j>=0:
                if board[i][j]==1:
                    return False
                i-=1
                j-=1
                
            i=row-1
            j=col+1
            while i>=0 and j<n:
                if board[i][j]==1:
                    return False
                i-=1
                j+=1
            i=row+1
            j=col-1
            while i<n and j>=0:
                if board[i][j]==1:
                    return False
                i+=1
                j-=1
            
            return True
        
        def solveRec(board: List[List[int]], row):
            nonlocal n, sols
            if row == n:
                sols.append(translate(board))
                return
            for col in range(n):
                board[row][col]=1
                if isValid(board, row, col):
                    solveRec(board, row+1)
                board[row][col]=0
            
        board=getBoard(n)
        
        solveRec(board, 0)
        return sols

                    
                        
                    
