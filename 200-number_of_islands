class Solution:
# Loop through each element of the list
# if the item is 1 and is not in seen, 
# run a DFS through all connected 1s and mark them as seen
# increment counter by 1
# Complexity: O(mn)

    def numIslands(self, grid: List[List[str]]) -> int:
        seen={}
        count=0
        
        def visit(x,y,q):
            m=len(grid)
            n=len(grid[0])
            if x<0 or x>=m or y<0 or y>=n:
                return
            if grid[x][y]=="1" and (x,y) not in seen:
                seen[(x,y)]=True
                q.append((x,y))
                
        
        def dfs(i,j):
            nonlocal grid
            nonlocal seen
            q=[(i,j)]
            while len(q)>0:
                (x,y)=q.pop()
                visit(x+1,y,q)
                visit(x-1,y,q)
                visit(x,y+1,q)
                visit(x,y-1,q)
                
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j]=="1" and (i,j) not in seen:
                    dfs(i,j)
                    count+=1
        return count
                    
                    
